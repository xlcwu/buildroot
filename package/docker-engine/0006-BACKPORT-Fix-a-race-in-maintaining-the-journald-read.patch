From 151ab29908e74a617bc73b00f796d87566f188ee Mon Sep 17 00:00:00 2001
From: Nalin Dahyabhai <nalin@redhat.com>
Date: Thu, 17 Mar 2016 16:17:11 -0400
Subject: [PATCH 06/41] BACKPORT: Fix a race in maintaining the journald reader
 list

Upstream reference: https://github.com/docker/docker/pull/21311

The journald log reader keeps a map of following readers so that it can
close them properly when the journald reader object itself is closed,
but it was possible for its worker goroutine to be scheduled so that the
worker attempted to remove a reader from the map before the reader had
been added to the map.  This patch adds the item to the map before
starting the goroutine which is expected to eventually remove it.

Signed-off-by: Nalin Dahyabhai <nalin@redhat.com> (github: nalind)
Signed-off-by: Antonio Murdaca <runcom@redhat.com>
---
 daemon/logger/journald/read.go | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/daemon/logger/journald/read.go b/daemon/logger/journald/read.go
index 49d037b..d2b2109 100644
--- a/daemon/logger/journald/read.go
+++ b/daemon/logger/journald/read.go
@@ -174,6 +174,9 @@ drain:
 }
 
 func (s *journald) followJournal(logWatcher *logger.LogWatcher, config logger.ReadConfig, j *C.sd_journal, pfd [2]C.int, cursor string) {
+	s.readers.mu.Lock()
+	s.readers.readers[logWatcher] = logWatcher
+	s.readers.mu.Unlock()
 	go func() {
 		// Keep copying journal data out until we're notified to stop.
 		for C.wait_for_data_or_close(j, pfd[0]) == 1 {
@@ -187,9 +190,6 @@ func (s *journald) followJournal(logWatcher *logger.LogWatcher, config logger.Re
 		C.sd_journal_close(j)
 		close(logWatcher.Msg)
 	}()
-	s.readers.mu.Lock()
-	s.readers.readers[logWatcher] = logWatcher
-	s.readers.mu.Unlock()
 	// Wait until we're told to stop.
 	select {
 	case <-logWatcher.WatchClose():
-- 
1.9.1

